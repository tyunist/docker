" ------------- Instruction -------------------
" Copy this file into ~/.vim/vimrc 
" Install vundle vim by: git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

" Then install the packages by doing: 
" vim 
" :PluginInstall 
" If there is an error saying ""The ycmd server SHUT DOWN (restart with :YcmRestartServer)", do the following:
" -----Fix Error------
" $ cd ~/.vim/bundle/YouCompleteMe
" $ python3 install.py --clang-completer
" Then do vim -> :PluginInstall as usual
" --------------------------------------------- 
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'itchyny/lightline.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-sleuth'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'drewtempelmeyer/palenight.vim'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-fugitive'


" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line 

set exrc            " force Vim to source .vimrc file if it
                    " it is present in working directory
set secure          " restricts usage of some commands in 
                    " non-default .vimrc files

syntax enable		" enable syntax processing
syntax on

set tabstop=4		" number of visual spaces per TAB
set softtabstop=4	" number of spaces in tab when editing
set shiftwidth=4    
set expandtab		" tabs are spaces

set colorcolumn=110 " Highligh col 110 with color
highlight ColorColumn ctermbg=darkgray
set bg=dark

set number		" show line numbers
set showcmd		" show command in bottom bar

set cursorline		" highlight current line

set wildmenu		" load filetype-specific indent files
set lazyredraw		" redraw only when we need to

set showmatch		" highlight matching [{()}]

set incsearch		" search as characters are entered
set hlsearch		" highlight matches

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

"set foldenable		"enable folding
"set foldlevelstart=10	" open most folds by default
"set foldnestmax=10	"10 nested fold max

" space open/closes folds
"nnoremap <space> za

"set foldmethod=indent	" fold based on indent level

"----- MOVEMENT-----"

" move vertically by visual line
nnoremap j gj 			
nnoremap k gk

" highlight last inserted text
nnoremap gV '[v']

let mapleader=","	" leader is comma

" Set backup in /tmp instead of file~ in current directory
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

set clipboard=unnamedplus

" Compile
nmap <F9> :SCCompile<cr>
nmap <F10> :SCCompileRun<cr>

" New line by pressing Enter 
nmap <CR> o<Esc>

" YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/.ycm_extra_conf.py'
"let g:ycm_key_list_select_completion=[]
"let g:ycm_key_list_previous_completion=[]
let g:ycm_add_preview_to_completeopt = 0

" NerdTree
nmap <F6> :NERDTreeToggle<CR>

" Tab shortcuts
"map <C-t><up> :tabr<cr>
"map <C-t><down> :tabl<cr>
"map <C-t><left> :tabp<cr>
"map <C-t><right> :tabn<cr>

map <C-Left> <Esc>:tabprev<CR>
map <C-Right> <Esc>:tabnext<CR>

" Lightline
set laststatus=2
set noshowmode

" Color Scheme
set background=dark
colorscheme palenight

" if (has("nvim"))
"   "For Neovim 0.1.3 and 0.1.4 <"https://github.com/neovim/neovim/pull/2198 >
"   let $NVIM_TUI_ENABLE_TRUE_COLOR=1
" endif
"   "For Neovim > 0.1.5 and Vim > patch 7.4.1799 <https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162>
"   "Based on Vim patch 7.4.1770 (`guicolors` option) <https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd>
"   " <https://github.com/neovim/neovim/wiki/Following-HEAD#20160511>
" if (has("termguicolors"))
"   set termguicolors
" endif

" Italics for my favorite color scheme
"let g:lightline = { 'colorscheme': 'palenight' }
let g:palenight_terminal_italics=1

" Turn off all sound when typeing                                                                                                                                                                       
set noeb vb t_vb= 

" fzf
map ; :Files 
